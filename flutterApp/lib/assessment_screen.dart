import 'package:flutter/material.dart';
import 'package:animate_do/animate_do.dart';
import 'main_screen.dart';
import 'widgets/edu_bot.dart';

class AssessmentScreen extends StatefulWidget {
  final String selectedLanguage;
  final bool isEnglish;

  const AssessmentScreen({
    Key? key,
    required this.selectedLanguage,
    required this.isEnglish,
  }) : super(key: key);

  @override
  _AssessmentScreenState createState() => _AssessmentScreenState();
}

class _AssessmentScreenState extends State<AssessmentScreen> {
  int _currentQuestionIndex = 0;
  int _difficulty = 2; // 1: Beginner, 2: Intermediate, 3: Advanced
  List<bool?> _answers = [];
  bool _isLoading = false;

  // Sample questions for each language and difficulty level
  // In a real app, these would be generated by AI based on user responses
  final Map<String, Map<int, List<Map<String, dynamic>>>> _questions = {
    'Python': {
      1: [
        // Beginner
        {
          'question': 'What is the output of: print("Hello" + " World")?',
          'options': ['Hello World', 'HelloWorld', 'Error', 'None'],
          'correct': 0,
        },
        // Add more beginner questions
      ],
      2: [
        // Intermediate
        {
          'question': 'What is a list comprehension in Python?',
          'options': [
            'A way to create lists using a compact syntax',
            'A way to sort lists',
            'A way to delete lists',
            'A way to merge lists'
          ],
          'correct': 0,
        },
        // Add more intermediate questions
      ],
      3: [
        // Advanced
        {
          'question': 'What is a decorator in Python?',
          'options': [
            'A design pattern',
            'A function that modifies another function',
            'A class method',
            'A type of loop'
          ],
          'correct': 1,
        },
        // Add more advanced questions
      ],
    },
    'JavaScript': {
      1: [
        // Beginner
        {
          'question': 'What is the result of: typeof []?',
          'options': ['array', 'object', 'list', 'undefined'],
          'correct': 1,
        },
      ],
      2: [
        // Intermediate
        {
          'question': 'What is closure in JavaScript?',
          'options': [
            'A way to end functions',
            'A function with access to its outer scope',
            'A way to close browser windows',
            'A type of loop'
          ],
          'correct': 1,
        },
      ],
      3: [
        // Advanced
        {
          'question': 'What is prototypal inheritance?',
          'options': [
            'A way to create objects',
            'A way to inherit properties from another object',
            'A type of function',
            'A design pattern'
          ],
          'correct': 1,
        },
      ],
    },
    'Java': {
      1: [
        // Beginner
        {
          'question': 'What is the main difference between int and Integer?',
          'options': [
            'Primitive vs Object',
            'Size in memory',
            'Performance',
            'Syntax'
          ],
          'correct': 0,
        },
      ],
      2: [
        // Intermediate
        {
          'question': 'What is the purpose of the synchronized keyword?',
          'options': [
            'Improve performance',
            'Handle thread synchronization',
            'Create new threads',
            'Manage memory'
          ],
          'correct': 1,
        },
      ],
      3: [
        // Advanced
        {
          'question': 'What is reflection in Java?',
          'options': [
            'A design pattern',
            'A way to examine classes at runtime',
            'A type of inheritance',
            'A memory management technique'
          ],
          'correct': 1,
        },
      ],
    },
    'C++': {
      1: [
        // Beginner
        {
          'question': 'What is the difference between stack and heap memory?',
          'options': [
            'Automatic vs Manual management',
            'Size limitations',
            'Access speed',
            'All of the above'
          ],
          'correct': 3,
        },
      ],
      2: [
        // Intermediate
        {
          'question': 'What is a virtual function?',
          'options': [
            'A function that doesn\'t exist',
            'A function that can be overridden',
            'A function without implementation',
            'A static function'
          ],
          'correct': 1,
        },
      ],
      3: [
        // Advanced
        {
          'question': 'What is RAII?',
          'options': [
            'Resource Acquisition Is Initialization',
            'Runtime Array Index Implementation',
            'Random Access Iterator Interface',
            'Reference And Indirect Inheritance'
          ],
          'correct': 0,
        },
      ],
    },
  };

  void _adjustDifficulty(bool wasCorrect) {
    if (wasCorrect && _difficulty < 3) {
      _difficulty++;
    } else if (!wasCorrect && _difficulty > 1) {
      _difficulty--;
    }
  }

  void _handleAnswer(int selectedOption) {
    if (_isLoading) return;

    final currentQuestion =
        _questions[widget.selectedLanguage]![_difficulty]![0];
    final wasCorrect = selectedOption == currentQuestion['correct'];

    setState(() {
      _answers.add(wasCorrect);
      _isLoading = true;
    });

    // Simulate AI processing time
    Future.delayed(Duration(seconds: 1), () {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _currentQuestionIndex++;
          _adjustDifficulty(wasCorrect);
        });

        if (_currentQuestionIndex >= 10) {
          _navigateToMainScreen();
        }
      }
    });
  }

  void _navigateToMainScreen() {
    final correctAnswers = _answers.where((answer) => answer == true).length;
    final level = correctAnswers >= 8
        ? 3
        : correctAnswers >= 5
            ? 2
            : 1;

    Navigator.of(context).pushReplacement(
      PageRouteBuilder(
        transitionDuration: Duration(milliseconds: 800),
        pageBuilder: (context, animation, secondaryAnimation) {
          return FadeTransition(
            opacity: animation,
            child: MainScreen(),
          );
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_currentQuestionIndex >= 10) {
      return Scaffold(
        body: Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

    final currentQuestion =
        _questions[widget.selectedLanguage]![_difficulty]![0];

    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.white, Color(0xFFF5F6FF)],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              // Progress Indicator
              Padding(
                padding: EdgeInsets.all(24),
                child: LinearProgressIndicator(
                  value: (_currentQuestionIndex + 1) / 10,
                  backgroundColor: Colors.grey.shade200,
                  valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF7277E4)),
                  borderRadius: BorderRadius.circular(10),
                  minHeight: 8,
                ),
              ),
              // Question Counter
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 24),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      widget.isEnglish
                          ? 'Question ${_currentQuestionIndex + 1} of 10'
                          : 'Soru ${_currentQuestionIndex + 1} / 10',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.grey.shade600,
                      ),
                    ),
                    Container(
                      padding:
                          EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: Color(0xFF7277E4).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Text(
                        widget.selectedLanguage,
                        style: TextStyle(
                          color: Color(0xFF7277E4),
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              // Question and Options
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(24),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Question
                      Container(
                        padding: EdgeInsets.all(24),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(20),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.05),
                              blurRadius: 10,
                              offset: Offset(0, 4),
                            ),
                          ],
                        ),
                        child: Text(
                          currentQuestion['question'],
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                            color: Colors.black87,
                          ),
                        ),
                      ),
                      SizedBox(height: 24),
                      // Options
                      ...List.generate(
                        currentQuestion['options'].length,
                        (index) => FadeInUp(
                          duration: Duration(milliseconds: 200 + (index * 100)),
                          child: Padding(
                            padding: EdgeInsets.only(bottom: 16),
                            child: GestureDetector(
                              onTap: () => _handleAnswer(index),
                              child: Container(
                                padding: EdgeInsets.all(20),
                                decoration: BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.circular(15),
                                  border: Border.all(
                                    color: Colors.grey.shade200,
                                  ),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.black.withOpacity(0.05),
                                      blurRadius: 10,
                                      offset: Offset(0, 4),
                                    ),
                                  ],
                                ),
                                child: Row(
                                  children: [
                                    Container(
                                      width: 32,
                                      height: 32,
                                      decoration: BoxDecoration(
                                        color:
                                            Color(0xFF7277E4).withOpacity(0.1),
                                        shape: BoxShape.circle,
                                      ),
                                      child: Center(
                                        child: Text(
                                          String.fromCharCode(65 + index),
                                          style: TextStyle(
                                            color: Color(0xFF7277E4),
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                    ),
                                    SizedBox(width: 16),
                                    Expanded(
                                      child: Text(
                                        currentQuestion['options'][index],
                                        style: TextStyle(
                                          fontSize: 16,
                                          color: Colors.black87,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              if (_isLoading)
                Padding(
                  padding: EdgeInsets.all(24),
                  child: Column(
                    children: [
                      CircularProgressIndicator(),
                      SizedBox(height: 16),
                      Text(
                        widget.isEnglish
                            ? 'Analyzing your answer...'
                            : 'Cevabınız analiz ediliyor...',
                        style: TextStyle(
                          color: Colors.grey.shade600,
                          fontSize: 16,
                        ),
                      ),
                    ],
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}
